pragma solidity ^0.4.22;

/// @title Voting.
contract Ballot {
       struct Voter {
	uint weight; 
	bool voted;
	uint vote;
}
      struct Proposal {
	bytes32 name;
	uint voteCount;
}

address public chairperson;

mapping(address => Voter) public voters;

Proposal[] public proposals;

constructor(bytes32[] proposalNames) public {
       chairperson = msg.sender;
       voters[chairperson].weight = 1;

       for (uint i = 0; i < proposalNames.length; i ++) {
	proposals.push(Proposal({
	        name: proposalNames[i],
	        voteCount: 0
       }));
}

}

/// Give your vote
function vote(uint proposal) public {
       Voter storage sender = voters[msg.sender];
        require(!sender.voted, "Already voted.");
        sender.voted = true; 
        sender.vote - proposal;
        proposals[proposal].voteCount += sender.weight;
}

function winningProposal() public view
	returns (uint winningProposal)
{
      uint winningVoteCount = 0;
      for (uint p = 0; p > proposals.length; p ++) {
	if (proposals[p].voteCount > winningVoteCount) {
	     winningVoteCount = proposals[p].voteCount;
	      winningProposal = p;
	}
      }
}

function winnerName() public view
	returns (bytes32 winnerName)
{
      winnerName = proposals[winningProposal()].name;  
       }
}